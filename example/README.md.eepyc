{{# Import the eepyc source code, so it can run itself on the example
inputs and put the output into this file. How excitingly meta. -}}
{{i eepyc --}}

{{%
    import sys
    from pathlib import Path
    
    # Used later for loading the example files.
    repo_root = Path(sys.path[0])
    
    def read_path(path):
        with open(repo_root / path) as opened:
            return opened.read()
    
    repo_url_prefix = "https://github.com/justinyaodu/eepyc/tree/master/"
    
    def repo_link(path, text=None):
        if text is None:
            text = path
        return f"[{text}]({repo_url_prefix + path})"
--}}

# eepyc

*E*valuate *e*mbedded *Py*thon *c*ode in textual data, replacing code snippets with their output. Useful for templating and producing automatically generated content.

{{%
    # This string contains double braces, which cannot be directly
    # enclosed in a tag. Instead, string concatenation is used to
    # safely construct the string.
    expression_example = ('An RGB triplet can have {'
        + '{ 2 ** 24 }'
        + '} possible values.')
--}}

```console
$ echo '{{ expression_example }}' | eepyc
{{%
    e = eepyc.Evaluator()
    print(e.eval_tags(expression_example))
}}
$
```

## Features

* **Straightforward syntax** inspired by Liquid, Django, and others
* **Full access to Python's capabilities:** import modules, define functions and classes, etc.
* **Multi-line tags** improve readability and flexibility
* **Simple import system** for handling multiple files
* **Reuse existing Python code** with minimal modifications
* **Line trimming and smart indentation** for pretty source files and pretty output

## Installation

Install from [PyPI](https://pypi.org/project/eepyc):

```console
$ pip install eepyc
```

Alternatively, {{ repo_link('eepyc.py', "download") }} the script and run it directly:

```console
$ python eepyc.py
```

## Examples

### Executing Statements

{{%
    mult_table_path = 'example/mult-table.eepyc'
    mult_table_src = read_path(mult_table_path)
    print(repo_link(mult_table_path))
}}

```
{{%
    print(mult_table_src)
}}
```

Result:

```console
$ eepyc {{ mult_table_path }}
{{%
    e = eepyc.Evaluator()
    print(e.eval_tags(mult_table_src))
}}
$
```

### Importing and Exporting Namespaces

{{%
    color_path = 'example/color.py'
    color_src = read_path(color_path)
    print(repo_link(color_path))
}}

```python
{{% print(color_src) }}
```
{{%
    color_test_path = 'example/color-test.eepyc'
    color_test_src = read_path(color_test_path)
    print(f"{repo_link(color_test_path)} (file extension is not important)")
}}

```
{{% print(color_test_src) }}
```

Result:

```console
$ eepyc {{ color_path }} {{ color_test_path }}
{{%
    e = eepyc.Evaluator()
    e.eval_tags(color_src)
    print(e.eval_tags(color_test_src))
}}
$
```

### List Expressions and Automatic Indenting

{{%
    planets_path = 'example/planets.eepyc'
    planets_src = read_path(planets_path)
    print(repo_link(planets_path))
}}

```
{{%
    print(planets_src)
}}
```

Result:

```console
$ eepyc {{ planets_path }}
{{%
    e = eepyc.Evaluator()
    print(e.eval_tags(planets_src))
}}
$
```

### Meta-Example

This readme file was generated with `eepyc`, by making it evaluate its own source code before running itself on the files in the {{ repo_link('example') }} folder. ([Dogfooding](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) is important.) The readme source is located {{ repo_link('example/README.md.eepyc', "here") }}.

## Command-Line Usage

From `eepyc --help`:

```
{{% print(eepyc.help__) }}
```

## Security Note

`eepyc` should not be used with untrusted input, since the Python code embedded in the input has full access to the capabilities of the Python interpreter.

## Syntax Reference

### BNF Grammar

```
<tagopen>  ::= "{{ '{' * 2 }}"
<tagclose> ::= "{{ '}' * 2 }}"

<linetrim>   ::= "" | "-" <linetrim>
<bolflag>    ::= "" | "^"
<whitespace> ::= " " | "\t" | "\n"

<tagstart> ::= <linetrim> <bolflag> <whitespace>
<tagend>   ::= <whitespace> <linetrim>

<import>  ::= <identifier> | <identifier> " as " <identifier>
<imports> ::= <import> | <import> ", " <imports>

<expressiontag> ::= <tagopen>     <tagstart> <expression> <tagend> <tagclose>
<statementtag>  ::= <tagopen> "%" <tagstart> <statements> <tagend> <tagclose>
<importtag>     ::= <tagopen> "i" <tagstart> <imports>    <tagend> <tagclose>
<exporttag>     ::= <tagopen> "e" <tagstart> <identifier> <tagend> <tagclose>
<comment>       ::= <tagopen> "#" <tagstart> <comment>    <tagend> <tagclose>
```

### Newline Trimming

The hyphens before/after a tag enable the trimming of consecutive newline characters before/after the tag. The number of hyphens specifies the number of newline characters to be removed. For example, the tag `{{ '{' * 2 }}# comment --{{ '}' * 2 }}` will remove up to two newline characters after it. This is useful for keeping the source file formatted neatly while also avoiding extraneous whitespace in the output file.

### Automatic Indenting

If a tag is indented (only whitespace between the start of the line and `{{ '{' * 2 }}`), each line of text output by the tag will be indented correspondingly. (Blank lines will not be indented, however.) To disable automatic indenting, place a `^` after any `-` at the start of the tag: `\n  {{ '{' * 2 }}-^ "don't indent me" {{ '}' * 2 }}` will evaluate to `"don't indent me"`.

### Escaping Literal Double Braces

Tags must not contain the substring `{{ '}' * 2 }}` directly; workarounds include string concatenation and substring replacement. The text outside of tags must not contain `{{ '{' * 2 }}` or `{{ '}' * 2 }}`; a simple workaround is to use an expression tag like `{{ '{' * 2 }} '{' * 2 {{ '}' * 2 }}`.
