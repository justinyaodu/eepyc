{{# Import the eepyc source code, so it can run itself on the example
inputs and put the output into this file. How excitingly meta. -}}
{{i eepyc --}}

{{%
import sys
from pathlib import Path

# Used later for loading the example files.
repo_root = Path(sys.path[0])

def read_path(path):
    with open(repo_root / path) as opened:
        return opened.read()

def print_path(path):
    print(f"[{path}]({path})")
--}}

# eepyc

***E***valuate ***e***mbedded ***Py***thon ***c***ode in text files, replacing code snippets with their output. Useful for templating and producing automatically generated content.

## Features

* **Straightforward syntax** inspired by Liquid, Django, and others
* **Full access to Python's capabilities:** import modules, define functions and classes, etc.
* **Multi-line tags** improve readability and flexibility
* **Simple import system** for handling multiple files
* **Reuse existing Python code** with minimal modifications
* **Whitespace control** for pretty source files and pretty output

## Examples

### Evaluating Expressions

{{%
# This string contains double braces, which cannot be directly enclosed
# in a tag. Instead, string concatenation is used to safely construct
# the string.
expression_example = ('An RGB triplet can have {'
    + '{ 2 ** 24 }'
    + '} possible values.')
--}}

```console
$ echo '{{ expression_example }}' | python eepyc.py
{{%
e = eepyc.Evaluator()
print(e.eval_tags(expression_example))
}}
$
```

### Executing Statements

{{%
mult_table_path = 'example/mult-table.eepyc'
mult_table_src = read_path(mult_table_path)
print_path(mult_table_path)
}}

```
{{%
print(mult_table_src)
}}
```

Result:

```console
$ python eepyc.py {{ mult_table_path }}
{{%
e = eepyc.Evaluator()
print(e.eval_tags(mult_table_src))
}}
$
```

### Importing and Exporting Namespaces

{{%
color_path = 'example/color.py'
color_src = read_path(color_path)
print_path(color_path)
}}

```python
{{% print(color_src) }}
```
{{%
color_test_path = 'example/color-test.eepyc'
color_test_src = read_path(color_test_path)
print_path(color_test_path)
print(" (file extension is not important)")
}}

```
{{% print(color_test_src) }}
```

Result:

```console
$ python eepyc.py {{ color_path }} {{ color_test_path }}
{{%
e = eepyc.Evaluator()
e.eval_tags(color_src)
print(e.eval_tags(color_test_src))
}}
$
```

### Meta-Example

This readme file was generated with `eepyc`, by making it evaluate its own source code before running itself on the files in the [example](example) folder. ([Dogfooding](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) is important.) The readme source is located [here](example/README.md.eepyc).

## Command-Line Usage

From `python eepyc.py --help`:

```
{{% print(eepyc.help__) }}
```

## Security Note

`eepyc` should not be used with untrusted input, since the Python code embedded in the input has full access to the Python interpreter.

## Syntax Reference

### BNF Grammar

```
<tagspec> ::= "" | "%" | "e" | "i" | "#"
<hyphens> ::= "" | "-" <hyphens>

<import> ::= <identifier> | <identifier> " as " <identifier>
<export> ::= <identifier>

<tagcontents> ::= <expression> | <statements> | <export> | <import> | <comment>

<tag> ::= "{{ '{' * 2 }}" <tagspec> <hyphens> <whitespace> <tagcontents> <whitespace> <hyphens> "{{ '}' * 2 }}"
```

### Additional Restrictions

A tag's `tagspec` must correspond to `tagcontents` as follows:

| `tagspec` | `tagcontents`  |
|-----------|----------------|
| `""`      | `<expression>` |
| `"%"`     | `<statements>` |
| `"e"`     | `<export>`     |
| `"i"`     | `<import>`     |
| `"#"`     | `<comment>`    |

Tags must not contain the substring `{{ '}' * 2 }}` directly; workarounds include string concatenation and substring replacement. The text outside of tags must not contain `{{ '{' * 2 }}` or `{{ '}' * 2 }}`; a simple workaround is to use an expression tag like `{{ '{' * 2 }} '{' * 2 {{ '}' * 2 }}`.

### Newline Trimming

The hyphens before/after a tag enable the trimming of consecutive newline characters before/after the tag. The number of hyphens specifies the number of newline characters to be removed. For example, the tag `{{ '{' * 2 }}# comment --{{ '}' * 2 }}` will remove up to two newline characters after it. This is useful for keeping the source file formatted neatly while also avoiding extraneous whitespace in the output file.

Newline characters between adjacent tags "belong" to the preceding tag and cannot be trimmed by the following tag, due to the limitations of the regex-based parser. However, this is a minor issue in practice, since the newlines can still be trimmed by the preceding tag.
